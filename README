--------
Contents
========

1 ... Project Description

2 ... AutoTools (configure and make) Installation

3 ... Ubuntu Installation

4 ... Debian and Raspbian Installation

5 ... Utility Scripts



-------------------------
1 ... Project Description
=========================

System Synopsis
---------------
This AutoTools project contains the libmgesysutils MGE System Utilities Library.

Notable function subjects include:-
Config file parsing.
Send a remote syslog entry.

If you are going to build, or build against, this libmgesysutils MGE System
Utilities Library then you must install the development files.

Project Structure
-----------------
This AutoTools project contains the entire MGE System Utilities Library System.

Whilst this project can be treated as a single entity, (build, install,
uninstall, etc), it is designed so that only the desired elements, the library
itself or all the parts can be installed on a system. Indeed, by the time this
system is packaged downstream, it is split into 3 packages.

These individual elements are contained in 3 subdirectories of the project root
and they are all AutoTools sub-projects in their own right. These sub-projects
are:-

dev		The development files for the library libmgesysutils.
lib		The general library libmgesysutils.
doc		Doxygen documentation on the entire project.

The development files generally consist of c header files, pkg-config files and
man pages.

Any dependencies not installed on your system will be identified by the
configure script. Any of these produced by this author can be found in a
repository located here:-
https://github.com/m-grant-prg

Please also refer to the specific README files in dev/ doc/ and lib/.


-------------------------------------------------
2 ... AutoTools (configure and make) Installation
=================================================

a) ... Download either the source or distribution tarball (the .tar.gz file)
	from:-
	https://github.com/m-grant-prg/libmgesysutils/releases

b) ... Extract the tarball preserving the directory structure.

c) ... cd to the directory created.

d) ... If you downloaded the source tarball type 'autoreconf -if'

e) ... Type './configure'

f) ... As root or sudo, type 'make install clean'

(Quote marks are for textual clarity only).

To uninstall the package:

1 ... cd to the directory created in the above install process.

2 ... As root or sudo, type 'make uninstall clean'


-------------------------
3 ... Ubuntu Installation
=========================
This script is available as an Ubuntu package hosted in a Personal Package
Archive (PPA). If you add this PPA to your software sources then you can easily
install, update and remove the package.

To view the details of this PPA please follow the link below:-
	https://code.launchpad.net/~m-grant-prg/+archive/ubuntu/utils

To add this PPA to your system please type the following:-
	sudo add-apt-repository ppa:m-grant-prg/utils
	sudo apt-get update

All 3 sub-projects are available as packages with the proper dependencies set
up, so each package can be addressed individually, however, most commonly only
the library and documentation packages will be handled.

To install this script on your system for use please type the following:-
	sudo apt-get update
	sudo apt-get install libmgesysutils

To uninstall this package at any time please type:-
	sudo apt-get remove libmgesysutils


--------------------------------------
4 ... Debian and Raspbian Installation
======================================
Debian and Raspbian '.deb' packages can be downloaded from:-
	https://github.com/m-grant-prg/libmgesysutils/releases

They can then be installed using a utility such as GDebi which is available in
the standard repos.


---------------------
5 ... Utility Scripts
=====================
In the project root directory there is a helper script; bootstrap.sh

bootstrap.sh
------------
This misleadingly named script bootstraps the project build and provides other
useful features. The main options below are probably c, D, m and t.

In AutoTools it is usually advisable to perform parallel builds. This means you
build somewhere other than the project root. This is because building creates
files and they would confuse the project root downwards. I always create a build
directory straight off the project root, cd to there and do all build and git
work from there, (.gitignore is already set to ignore such a directory).

Assuming you adopt the preceding paragraph then a typical invocation of the
script would be:-
../bootstrap.sh --make ..
The last '..' points the way to project root.

The full list of arguments to bootstrap.sh are:-
	-c, --distcheck perform a normal make distcheck.

	-d, --debug build with appropriate debug flags.

	-D, --dist perform a make dist.

	-f, --distcheckfake run a make  distcheck  using  a  fake  AT  standard
	directory as a substitute for an absolute path which distcheck does not
	support.

	-g, --gnulib run gnulib-tool --update. Checks for the existence of  the
	cache  file  proj-root/m4/gnulib-cache.m4.  If  it  does  not exist the
	update is not run.

	-h, --help prints usage information.

	-m, --make compile and link - plain make.

	-s, --sparse pass --enable-sparse=yes to configure.

	-t, --source-tarball perform a make srctarball to build a source
	tarball.

	-V, --version prints version information
